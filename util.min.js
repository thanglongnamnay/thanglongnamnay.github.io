const{join:join}=require("path"),fs=require("fs").promises,handleError=(e=console.error)=>t=>{t&&e(t)},unary=e=>t=>e(t),isNotIgnored=e=>t=>!e.some(e=>e.test(t)),isDirectory=e=>fs.stat(e).then(e=>e.isDirectory()).catch(handleError),toFullSource=e=>t=>join(e,t),getSubDirectories=e=>fs.readdir(e).then(t=>t.map(toFullSource(e))).then(e=>e.filter(isDirectory)).then(e=>e.map(unary(basename))).then(e=>e.filter(isNotIgnored(ignoredFolders))),getElement=e=>t=>t.window.document.querySelector(e),getTitle=e=>getElement("title")(e).textContent,getDescription=e=>getElement('meta[name="description"]')(e).attributes.getNamedItem("content").textContent,getInfo=e=>({title:getTitle(e),description:getDescription(e)}),relativePosix=(e,t)=>relative(e,t).split(sep).join("/"),getStyleHTML=e=>`<link rel="stylesheet" href="/${relativePosix(ROOT,e)}">`,getScriptHTML=e=>`<script src="/${relativePosix(ROOT,e)}"><\/script>`,safeWriteFile=async(e,t)=>{try{await fs.mkdir(dirname(e))}catch(e){console.error(e)}return await fs.writeFile(e,t)},readFile=async e=>{try{const t=await fs.readFile(e,"utf8");return console.log("READ:",e),{source:e,data:t}}catch(t){console.log("READ:",e,t.message)}},delFile=e=>{try{fs.unlink(e)}catch{}};
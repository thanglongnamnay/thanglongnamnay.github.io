class ExtPromise{static all(e){return new ExtPromise((t,s)=>Promise.all(e).then(t,s))}static race(e){return new ExtPromise((t,s)=>Promise.race(e).then(t,s))}static any(e){let t=e.length;const s=[];return new ExtPromise((r,i)=>{e.forEach((e,h)=>{e.then(e=>{r(e)},e=>{s[h]=e,--t>0||i(s)})})})}static allSettled(e){let t=e.length;const s=[],r=(e,r,i)=>h=>{s[r]={status:i,value:h},--t>0||e(s)};return new ExtPromise(t=>{e.forEach((e,s)=>{e.then(r(t,s,"fulfilled"),r(t,s,"rejected"))})})}static reject(e){return new ExtPromise((t,s)=>Promise.reject(e).then(t).catch(s))}static resolve(e){return new ExtPromise((t,s)=>Promise.resolve(e).then(t).catch(s))}constructor(e){"Promise"===e.constructor.name?this.promise_=Promise.race([e]):this.promise_=new Promise(e),this.stoped=!1,this.thenCallbacks_=[],this.catchCallbacks_=[],this.chidrenPromises_=[]}then(e=(e=>e),t){this.thenCallbacks_.push(e),t&&this.catchCallbacks_.push(t);const s=new ExtPromise(this.promise_.then(t=>{if(!this.stoped)return e(t)},e=>{if(!this.stoped)return t(e)}));return this.stoped&&s.cancel(),this.chidrenPromises_.push(s),s}catch(e){return this.then(void 0,e)}resolve(e){return this.stoped||(this.promise_=Promise.resolve(e),this.chidrenPromises_.forEach(e=>e.cancel()),this.chidrenPromises_=this.chidrenPromises_.map((e,t)=>this.promise_.then(this.thenCallbacks_[t]))),this.stoped=!0,this}reject(e){return this.stoped||(this.promise_=Promise.reject(e),this.thenCallbacks_.forEach(e=>{this.promise_.catch(e)})),this.chidrenPromises_.forEach(t=>t.reject(e)),this}cancel(){return this.stoped||(this.stoped=!0),this.chidrenPromises_.forEach(e=>e.cancel()),this}}
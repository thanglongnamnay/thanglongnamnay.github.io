"use strict";importScripts("util.min.js","classes.min.js","pre.min.js");const lineColor="#ddd",scale=2,dotColor="#d11";let canvas,ctx;const handleMouseMove=[],handleMouseClick=[],handleKeyUp=[];let polygonListViewport,canvasRect,pointList,pointListViewport,polygonList=[];handleMouseMove[0]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height);drawPoint(canvas,ctx,"#d11",t)};const rays=[getRays(60),getRays(6e3)];handleMouseMove[1]=handleMouseClick[1]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayIntersection(canvas,ctx,t,polygonList,rays[0]);Polygon("#eee",e).draw(canvas,ctx),e.forEach(a=>drawRay(canvas,ctx,"#ddd",t,a.minus(t))),e.forEach(a=>drawPoint(canvas,ctx,"red",a)),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[2]=handleMouseClick[2]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayIntersection(canvas,ctx,t,polygonList,rays[0]);Polygon("#eee",e).draw(canvas,ctx),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[3]=!1,handleMouseClick[3]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayIntersection(canvas,ctx,t,polygonList,rays[1]);Polygon("#eee",e).draw(canvas,ctx),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[4]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayVertex(canvas,ctx,t,pointList,polygonList,!1);Polygon("#eee",e).draw(canvas,ctx),e.forEach(a=>drawRay(canvas,ctx,"#ddd",t,a.minus(t))),e.forEach(a=>drawPoint(canvas,ctx,"red",a)),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[5]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayVertex(canvas,ctx,t,pointList,polygonList);Polygon("#eee",e).draw(canvas,ctx),e.forEach(a=>drawRay(canvas,ctx,"#ddd",t,a.minus(t))),e.forEach(a=>drawPoint(canvas,ctx,"red",a)),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[6]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayVertex(canvas,ctx,t,pointListViewport,polygonListViewport);Polygon("#eee",e).draw(canvas,ctx),e.forEach(a=>drawRay(canvas,ctx,"#ddd",t,a.minus(t))),e.forEach(a=>drawPoint(canvas,ctx,"red",a)),drawPoint(canvas,ctx,"#d11",t)},handleMouseMove[7]=function(a){redraw(canvas,ctx,polygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=drawAllRayVertex(canvas,ctx,t,pointListViewport,polygonListViewport);Polygon("#eee",e).draw(canvas,ctx),drawPoint(canvas,ctx,"#d11",t)};const customPolygonList=[];let drawing=!1,currentPolygon=Polygon(randomColor(),[]),nextPolygon=Polygon(randomColor(),[Vector(0,0)]);function handleRequestApply(){self.postMessage(customPolygonList.map(a=>a.toObject()))}function handleRequestReset(){customPolygonList.length=1,redraw(canvas,ctx,customPolygonList)}function handleApply(a){polygonList=a.map(Polygon.fromObject),redraw(canvas,ctx,polygonList),pointList=polygonListToPointList(polygonList),polygonListViewport=[...polygonList,canvasRect],pointListViewport=polygonListToPointList(polygonListViewport)}handleMouseClick[8]=function(a){const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height);currentPolygon.addPoints(t),nextPolygon.points[nextPolygon.points.length-1]=t,nextPolygon.addPoints(t),redraw(canvas,ctx,[...customPolygonList,currentPolygon]),drawing=!0},handleMouseMove[8]=function(a){const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height);if(redraw(canvas,ctx,customPolygonList),drawing)nextPolygon.points[nextPolygon.points.length-1]=t,redraw(canvas,ctx,[...customPolygonList,nextPolygon,currentPolygon]);else{redraw(canvas,ctx,customPolygonList);const{x:o,y:n}=a,t=Vector(o/canvas.height,n/canvas.height),e=polygonListToPointList(customPolygonList),s=drawAllRayVertex(canvas,ctx,t,e,customPolygonList);Polygon("#eee",s).draw(canvas,ctx)}drawPoint(canvas,ctx,"#d11",t)},handleKeyUp[8]=function(a){13===a.which&&(customPolygonList.push(currentPolygon),redraw(canvas,ctx,customPolygonList),currentPolygon=Polygon(randomColor(),[]),nextPolygon=Polygon(randomColor(),[Vector(0,0)]),drawing=!1)},self.onmessage=a=>{const o=a.data.index;if(a.data.e)switch(a.data.type){case"move":handleMouseMove[o]&&handleMouseMove[o](a.data.e);break;case"click":handleMouseClick[o]&&handleMouseClick[o](a.data.e);break;case"keyup":handleKeyUp[o]&&handleKeyUp[o](a.data.e);break;case"apply":handleRequestApply();break;case"reset":handleRequestReset();break;case"switch-mode-6k":handleMouseMove[3]?handleMouseMove[3]=!1:handleMouseMove[3]=handleMouseClick[3]}else{if(a.data.offscreen){canvas=a.data.offscreen,console.log(canvas),ctx=canvas.getContext("2d");const o=canvas.width/canvas.height;canvasRect=Polygon("#333",[Vector(-.5,-.5),Vector(o+.5,-.5),Vector(o+.5,1.5),Vector(-.5,1.5)]),customPolygonList[0]=canvasRect}handleApply(a.data.polygonList),o<8&&(handleMouseClick[o]&&handleMouseClick[o]({x:canvas.height/2,y:canvas.height/2}),handleMouseMove[o]&&handleMouseMove[o]({x:canvas.height/2,y:canvas.height/2}))}};
"use strict";function drawPoint(t,n,o,e,i=5){e=e.toWorld(t),n.fillStyle=o,n.beginPath(),n.arc(e.x,e.y,i,0,2*Math.PI,!0),n.fill()}function drawPolygon(t,n,o,e,i){i=i.map(n=>n.toWorld(t)),n.fillStyle=e,n.strokeStyle=o,n.beginPath();for(let t=0;t<i.length;++t)n.lineTo(i[t].x,i[t].y);n.closePath(),n.fill(),n.stroke()}function drawTriangles(t,n,o,e,i,s){const l=i.length;for(let r=0;r<l;++r)drawPolygon(t,n,o,e,[i[r],i[(r+1)%l],s])}function drawRay(t,n,o,e,i){const s=e.plus(i.normalized().mult(2)),l=s.toWorld(t),r=e.toWorld(t);return n.beginPath(),n.strokeStyle=o,n.moveTo(r.x,r.y),n.lineTo(l.x,l.y),n.fill(),n.stroke(),{point1:e,point2:s}}function getPointsOnRay(t,n){return{point1:t,point2:t.plus(n.normalized().mult(5))}}function checkLineIntersection(t,n,o,e){let i,s,l,r,c,p=t.x,a=t.y,f=n.x,u=n.y,h=o.x,y=o.y,g=e.x,d=e.y,L={x:null,y:null,onLine1:!1,onLine2:!1};return 0==(i=(d-y)*(f-p)-(g-h)*(u-a))?L:(c=(f-p)*(s=a-y)-(u-a)*(l=p-h),s=(r=(g-h)*s-(d-y)*l)/i,l=c/i,L.x=p+s*(f-p),L.y=a+s*(u-a),s>0&&s<1&&(L.onLine1=!0),l>0&&l<1&&(L.onLine2=!0),L.position=Vector(L.x,L.y),L)}function drawRayIntersection(t,n,o,e,i,s){const{point1:l,point2:r}=getPointsOnRay(e,i),c=[];let p;const a=s.length;for(let t=0;t<a;++t){const n=checkLineIntersection(l,r,s[t],s[(t+1)%a]);n.onLine1&&n.onLine2&&(!p||e.distantTo(n.position)<e.distantTo(p))&&(p=n.position)}return p&&c.push(p),c}function getRays(t){const n=2*Math.PI/t,o=[];let e=Vector(1,0);for(let i=0;i<t;++i)o.push(e),e=e.rotate(n);return o}function drawAllRayIntersection(t,n,o,e,i){const s=[];for(const t of i){const{point1:n,point2:i}=getPointsOnRay(o,t);let l=i;for(const t of e){const e=t.points,s=e.length;for(let t=0;t<s;++t){const r=checkLineIntersection(n,i,e[t],e[(t+1)%s]);r.onLine1&&r.onLine2&&o.distantTo(r.position)<o.distantTo(l)&&(l=r.position)}}s.push(l)}return s}function polygonPairToPointList(t,n){const o=[];for(let e=0;e<t.points.length;++e){const i=(e+1)%t.points.length;for(let s=0;s<n.points.length;++s){const l=(s+1)%n.points.length,r=checkLineIntersection(t.points[e],t.points[i],n.points[s],n.points[l]);r.onLine1&&r.onLine2&&o.push(r.position)}}return o}function selfIntersection(t){const n=t.points.length,o=[];for(let e=0;e<n;++e){const i=(e+1)%n;for(let s=e+1;s<n;++s){const l=(s+1)%n,r=checkLineIntersection(t.points[e],t.points[i],t.points[s],t.points[l]);r.onLine1&&r.onLine2&&o.push(r.position)}}return o}function polygonListToPointList(t){const n=t.length,o=[];for(let e=0;e<n;++e){o.push(...t[e].points,...selfIntersection(t[e]));for(let i=e+1;i<n;++i)o.push(...polygonPairToPointList(t[e],t[i]))}return o}function drawAllRayVertex(t,n,o,e,i,s=!0){let l=e.map(t=>t.minus(o));return l=l.flatMap(t=>[t.rotate(1e-5),t.rotate(-1e-5)]),s&&l.sort((t,n)=>t.angleTo(n)),drawAllRayIntersection(t,n,o,i,l)}function redraw(t,n,o){n.fillStyle="#333",n.fillRect(0,0,t.width,t.height);for(const e of o)e.draw(t,n)}
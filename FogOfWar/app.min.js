"use strict";import Util from"./util-module.min.js";import Vector from"./Vector.min.js";import Polygon from"./Polygon.min.js";import{drawPoint,drawRay,getRays,drawAllRayIntersection,polygonListToPointList,drawAllRayVertex,redraw}from"./pre-module.min.js";const util=Util(2),$=o=>document.getElementById(o),canvasList=document.getElementsByClassName("figure-canvas"),handleResize=util.debounce(()=>{console.log("some"),util.scale=1600/canvasList[0].offsetWidth},100);window.onresize=handleResize,handleResize();let wph=canvasList[0].width/canvasList[0].height,polygonList=[];const rect=Polygon(util.randomColor(),[Vector(0,0),Vector(0,.2),Vector(.2,.2),Vector(.2,0)]);polygonList.push(rect.move(Vector(.1*wph,.1)),rect.move(Vector(.6*wph,.4)),rect.move(Vector(.2*wph,.5)));const canvasRect=Polygon("#333",[Vector(-.5,-.5),Vector(wph+.5,-.5),Vector(wph+.5,1.5),Vector(-.5,1.5)]);let polygonListViewport=[canvasRect,...polygonList],pointList=polygonListToPointList(polygonList),pointListViewport=polygonListToPointList(polygonListViewport);const ctxList=[],dotColor="#d11",lineColor="#ddd";for(let o=0;o<canvasList.length;++o)ctxList.push(canvasList[o].getContext("2d"));let handleMouseMove=[],handleMouseClick=[],handleKeyUp=[];handleMouseMove[0]=function(o){const t=canvasList[0],n=ctxList[0];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height);drawPoint(t,n,"#d11",i)};const rays=[getRays(60),getRays(6e3)];handleMouseMove[1]=function(o){const t=canvasList[1],n=ctxList[1];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayIntersection(t,n,i,polygonList,rays[0]);Polygon("#eee",a).draw(t,n),a.forEach(o=>drawRay(t,n,"#ddd",i,o.minus(i))),a.forEach(o=>drawPoint(t,n,"red",o)),drawPoint(t,n,"#d11",i)},handleMouseMove[2]=function(o){const t=canvasList[2],n=ctxList[2];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayIntersection(t,n,i,polygonList,rays[0]);Polygon("#eee",a).draw(t,n),drawPoint(t,n,"#d11",i)},handleMouseMove[3]=!1,handleMouseClick[3]=function(o){const t=canvasList[3],n=ctxList[3];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayIntersection(t,n,i,polygonList,rays[1]);Polygon("#eee",a).draw(t,n),drawPoint(t,n,"#d11",i)},$("switch-mode-6k").onclick=o=>{o.preventDefault(),console.log(o),canvasList[3].onmousemove?canvasList[3].onmousemove=null:canvasList[3].onmousemove=handleMouseClick[3]},handleMouseMove[4]=function(o){const t=canvasList[4],n=ctxList[4];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayVertex(t,n,i,pointList,polygonList,!1);Polygon("#eee",a).draw(t,n),a.forEach(o=>drawRay(t,n,"#ddd",i,o.minus(i))),a.forEach(o=>drawPoint(t,n,"red",o)),drawPoint(t,n,"#d11",i)},handleMouseMove[5]=function(o){const t=canvasList[5],n=ctxList[5];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayVertex(t,n,i,pointList,polygonList);Polygon("#eee",a).draw(t,n),a.forEach(o=>drawRay(t,n,"#ddd",i,o.minus(i))),a.forEach(o=>drawPoint(t,n,"red",o)),drawPoint(t,n,"#d11",i)},handleMouseMove[6]=function(o){const t=canvasList[6],n=ctxList[6];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayVertex(t,n,i,pointListViewport,polygonList);Polygon("#eee",a).draw(t,n),a.forEach(o=>drawRay(t,n,"#ddd",i,o.minus(i))),a.forEach(o=>drawPoint(t,n,"red",o)),drawPoint(t,n,"#d11",i)},handleMouseMove[7]=function(o){const t=canvasList[7],n=ctxList[7];redraw(t,n,polygonList);const{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height),a=drawAllRayVertex(t,n,i,pointListViewport,polygonList);Polygon("#eee",a).draw(t,n),drawPoint(t,n,"#d11",i)};const customPolygonList=[canvasRect];let drawing=!1,currentPolygon=Polygon(util.randomColor(),[]),nextPolygon=Polygon(util.randomColor(),[Vector(0,0)]);handleMouseClick[8]=function(o){const t=canvasList[8],n=ctxList[8],{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height);currentPolygon.addPoints(i),nextPolygon.points[nextPolygon.points.length-1]=i,nextPolygon.addPoints(i),redraw(t,n,[...customPolygonList,currentPolygon]),drawing=!0},handleMouseMove[8]=function(o){const t=canvasList[8],n=ctxList[8],{x:e,y:s}=util.getXY(o),i=Vector(e/t.height,s/t.height);if(redraw(t,n,customPolygonList),drawing)nextPolygon.points[nextPolygon.points.length-1]=i,redraw(t,n,[...customPolygonList,nextPolygon,currentPolygon]);else{const o=Vector(e/t.height,s/t.height),i=polygonListToPointList(customPolygonList),a=drawAllRayVertex(t,n,o,i,customPolygonList);Polygon("#eee",a).draw(t,n)}drawPoint(t,n,"#d11",i)},handleKeyUp[8]=function(o){const t=canvasList[8],n=ctxList[8];13===o.which&&(customPolygonList.push(currentPolygon),redraw(t,n,customPolygonList),currentPolygon=Polygon(util.randomColor(),[]),nextPolygon=Polygon(util.randomColor(),[Vector(0,0)]),drawing=!1)};for(let o=0;o<canvasList.length;++o)canvasList[o].onmousemove=handleMouseMove[o],canvasList[o].onclick=handleMouseClick[o];const lastCanvasIndex=canvasList.length-1;function requestApply(o){return function(o){handleApply(customPolygonList.slice(1)),customPolygonList.length=1}}function requestReset(o){return function(t){redraw(canvasList[o],ctxList[o],polygonList),customPolygonList.length=1}}function randomPolygons(){polygonList.length=0;const o=5*Math.random()+1>>0;for(let t=0;t<o;++t){const o=[],t=3*Math.random()+2>>0;for(let n=0;n<t;++n)o.push(Vector(Math.random(),Math.random()));polygonList.push(Polygon(util.randomColor(),o))}handleApply(polygonList)}function handleApply(o){polygonList=[...o],polygonListViewport=[canvasRect,...polygonList],pointList=polygonListToPointList(polygonList),pointListViewport=polygonListToPointList(polygonListViewport);for(let o=0;o<canvasList.length;++o)redraw(canvasList[o],ctxList[o],polygonList)}document.body.onkeyup=handleKeyUp[lastCanvasIndex],$("apply-button").onclick=requestApply(lastCanvasIndex),$("reset-button").onclick=requestReset(lastCanvasIndex),$("random-button").onclick=o=>{randomPolygons();for(let o=0;o<canvasList.length;++o)redraw(canvasList[o],ctxList[o],polygonList)};
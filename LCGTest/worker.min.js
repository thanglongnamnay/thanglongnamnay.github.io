"use strict";const MAX=-(1<<31);function throttle(t,n){let e=Date.now()-n;return function(...i){Date.now()-e>=n&&(t.apply(this,i),e=Date.now())}}function average(t){let n=0;const e=throttle(function(t){self.postMessage({average:n/t})},100);for(let i=1;i<=MAX;++i)n+=t(),e(i);return n/MAX}function distribution1(t,n){const e=n.length,i=throttle(function(t){self.postMessage({distribution:n,sum:t})},100);for(let t=0;t<e;++t)n[t]=0;for(let o=0;o<MAX;++o){const r=t()*e>>0;++n[r],i(o)}return n.map(t=>t/MAX)}function distribution2(t,n){const e=new Uint32Array(n),i=e.length,o=throttle(function(t){self.postMessage(t)},100);for(let t=0;t<i;++t)e[t]=0;for(let n=0;n<MAX;++n){++e[t()*i>>0],o(n)}return e.map(t=>t/MAX)}function LCG(t,n,e,i){return function(){return(i=(t*i+n)%e)/e}}self.onmessage=t=>{const{a:n,c:e,m:i,x:o}=t.data.inputs,r=LCG(n,e,i,o);switch(t.data.fuckingThingTodo){case"average":average(r);break;case"distribution1":distribution1(r,t.data.distribution);break;case"distribution2":distribution2(r,t.data.distributionBuffer)}};